package model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Class State_
 *
 * @author Camila
 * @author Caroline
 */
public class State_ {
    // name of state
    private String name;
    // id used for integration with libraries
    private int id;
    // description used in the intersection and to get the words
    private String info;
    // to get path
    private boolean visited;

    private List<Transition_> transitions = new ArrayList<>();

    private List<String> in = new ArrayList<>();        // List of input labels used by the state
    private List<String> out = new ArrayList<>();       // List of output labels used by the state
    private List<State_> adj = new ArrayList<>();       // List of states in state adjacency

    /**
     * Empty constructor
     */
    public State_()
    {
        this.name = "";
    }

    /**
     * Constructor + state name
     * @param name state's name
     */
    public State_(String name)
    {
        this.name = name;
    }

    /***
     * Constructor receives state name and id, used for integration with libraries
     *
     * @param name
     * @param id
     */
    public State_(String name, int id) {
        this.name = name;
        this.id = id;
    }

    /***
     * Constructor receives the state name, info
     *
     * @param name
     * @param info
     */
    public State_(String name, String info) {
        this.name = name;
        this.info = info;
    }

    /***
     * Constructor receives a state and generates a copy of it
     *
     * @param state
     */
    public State_(State_ state) {
        this.id = state.id;
        this.name = state.name;
        this.info = state.info;
    }

    /**
     * Getter for state name
     * @return state name
     */
    public String getName() { return this.name; }

    /**
     * Alter state name
     *
     * @param name
     *
     */
    public void setName(String name) {
        this.name = name;
    }

    /***
     * Return state id
     *
     * @return id
     */
    public int getId() {
        return id;
    }

    /***
     * Alter state id
     *
     * @param id
     */
    public void setId(int id) {
        this.id = id;
    }

    /***
     * Return info
     *
     * @return info
     */
    public String getInfo() {
        return info;
    }

    /***
     * alter info
     *
     * @param info
     */
    public void setInfo(String info) {
        this.info = info;
    }

    /***
     * Return visited
     *
     * @return visited
     */
    public boolean isVisited() {
        return visited;
    }

    /***
     * alter visited
     *
     * @param visited
     */
    public void setVisited(boolean visited) {
        this.visited = visited;
    }

    /**
     * Obtains list of inputs generated by the state's transitions
     * @return list of input labels
     */
    public List<String> getIn() {
        return in;
    }

    /**
     * Obtains a list of outputs generated by the state's transitions
     * @return list of output labels
     */
    public List<String> getOut() {
        return out;
    }

    /**
     * Adds input label to inputs
     * @param input
     */
    public void addIn(String input) { this.in.add(input); }

    /**
     * Adds output label to outputs
     * @param output
     */
    public void addOut(String output) { this.out.add(output); }

    /***
     * Overwrites the equals of the state, equality between states is only
     * considering the name
     */
    @Override
    public boolean equals(Object obj) {
        //boolean result;
        if (obj == null || obj.getClass() != getClass()) {
            return false;
        } else {
            State_ _state = (State_) obj;
            return this.name.equals(_state.name);
        }
        //return result;
    }

    /**
     * Returns list of all states in this state's adjacency.
     * @return adjacency list adj
     */
    public List<State_> getAdj() {
        return adj;
    }

    /**
     * Sets adjacency list.
     * @param adj
     */
    public void setAdj(List<State_> adj) {
        this.adj = adj;
    }

    /**
     * Adds parameter state in adjacency list.
     * @param s state to be added to adjacency list
     */
    public void addAdj(State_ s) {
        this.adj.add(s);
    }

    /***
     * Method to string override
     *
     * @return name of state
     */
    @Override
    public String toString() {
        return name;
    }

    /***
     * Overwrites state hash based on name and id
     */
    @Override
    public int hashCode() {
        final int prime = 7;
        int result = 56;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + id;
        return result;
    }

    /**
     * Alters set of transitions
     * @param transitions
     */
    public void setTransitions(ArrayList<Transition_> transitions) {
        this.transitions = transitions;
    }

    /**
     * Adds transition to set of transitions
     * @param t
     */
    public void addTransition(Transition_ t) {
        this.transitions.add(t);
    }

    /**
     * Getter for set of transitions
     * @return
     */
    public List<Transition_> getTransitions() {
        return this.transitions;
    }

    public void setTransitions(List<Transition_> transitions) {
        //this.transitions = new ArrayList<>(transitions);
        this.transitions = transitions;
    }

    /**
     * Getter for input transitions
     */
    public List<Transition_> getInputTransitions(List<String> inputs)
    {
        List<Transition_> list = new ArrayList<>();

        for(Transition_ transition : transitions)
        {
            if(inputs.contains(transition.getLabel()))
            {
                list.add(transition);
            }
        }

        return list;
    }

    /**
     * Getter for output transitions
     */
    public List<Transition_> getOutputTransitions(List<String> outputs)
    {
        List<Transition_> list = new ArrayList<>();

        for(Transition_ transition : transitions)
        {
            if(outputs.contains(transition.getLabel()))
            {
                list.add(transition);
            }
        }

        return list;
    }

}
